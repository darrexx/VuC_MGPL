grammar edu.udo.MGPL with org.eclipse.xtext.common.Terminals

generate mGPL "http://www.udo.edu/MGPL"

Prog:
	{Programm} 'game' name=ID '(' attrAssList=AttrAssList? ')' decl+=Decl* stmtBlock=StmtBlock block+=Block*
;

Decl returns Declaration:
	VarDecl ';' | ObjDecl ';'
;

VarDecl returns Declaration:
	{IntDecl} type='int' name=ID init=Init? | {IntArrayDecl} type='int' name=ID '[' size=INT ']'
;

Init: 
	'=' expr=Expr
;

ObjDecl returns Declaration: 
	{ObjDecl} type=OBJTYPE name=ID '(' attrAssList=AttrAssList? ')' | {ObjArrayDecl} type=OBJTYPE name=ID '[' size=INT ']'
;

terminal OBJTYPE: 
	'rectangle' | 'triangle' | 'circle'
;

AttrAssList: 
    {AttributeAssignments} assignments+=AttrAss (',' assignments+=AttrAss)*
;

AttrAss:
	{AttributeAssignment} name=ID '=' expr=Expr
;

Block: 
	AnimBlock | EventBlock
;

AnimBlock: 
	{Animation} 'animation' name=ID '(' param=AnimationParameter ')' stmtBlock=StmtBlock 
;

AnimationParameter:
	{AnimationParameter} type=OBJTYPE name=ID
;

EventBlock: 
	{Event} 'on' keystroke=KEYSTROKE stmtBlock=StmtBlock 
;

terminal KEYSTROKE: 
	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow'
;

StmtBlock: 
	{Statements} '{' stmt+=Stmt* '}'
;

Stmt:
	IfStmt | ForStmt | AssStmt ';'
;

IfStmt: 
	{IfStatement} 'if' '(' condition=Expr ')' stmtBlockIf=StmtBlock ('else' stmtBlockElse=StmtBlock)?
;

ForStmt: 
	{ForStatement} 'for' '(' loopInit=AssStmt ';' loopCondition=Expr ';' loopIncrement=AssStmt ')' stmtBlock=StmtBlock 
;

AssStmt returns Declaration:
	{AssignmentStatement} var=Var '=' expr=Expr
;


Var: 
	name = [Declarations]
	 ({ArrayElementSelect.variable = current} '[' index=Expr ']')?
	 ({MemberSelect.variable = current} '.' memberName=ID)? 
	//( '[' expr=Expr ']'('.' memberName=ID)?)? | objectName=[Declaration] '.' memberName=ID  
;

Expr returns Expression: 
	OrExpr
;

OrExpr returns Expression:
	AndExpr ({Or.left=current} op='||' right=AndExpr)*
;

AndExpr returns Expression:
	RelExpr ({And.left=current} op='&&' right=RelExpr)*
;

RelExpr returns Expression:
	AddExpr ({Rel.left=current} op=('<'|'<='|'==') right=AddExpr)*
;

AddExpr returns Expression:
	MultExpr ({Add.left=current} op=('+'|'-') right=MultExpr)*
;

MultExpr returns Expression:
	UnExpr ({Mult.left=current} op=('*'|'/') right=UnExpr)*
;

UnExpr returns Expression: 
	{Negation} op=('!'|'-') exprAtom=AtomExpr | AtomExpr
;

AtomExpr returns Expression: 
	{IntLiteral} value=INT| var = Var ({Touches.left = current} op='touches' right=Var)? | '(' expr=Expr ')' 
;

Declarations:
	Prog | Decl | AnimationParameter | AnimBlock
;