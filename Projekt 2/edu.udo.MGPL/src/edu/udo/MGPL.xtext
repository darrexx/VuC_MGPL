grammar edu.udo.MGPL with org.eclipse.xtext.common.Terminals

generate mGPL "http://www.udo.edu/MGPL"

Prog:
	'game' name=ID '(' atrAssList=AttrAssList? ')' decl+=Decl* stmtBlock=StmtBlock block+=Block*
;

Decl:
	VarDecl ';' | ObjDecl ';'
;

VarDecl:
	'int' name=ID init=Init? | 'int' name=ID '[' value=INT ']'
;

Init: 
	'=' Expr
;

ObjDecl: 
	OBJTYPE name=ID '(' attrAssList=AttrAssList? ')' | OBJTYPE name=ID '[' value=INT ']'
;

terminal OBJTYPE: 
	'rectangle' | 'triangle' | 'circle'
;

AttrAssList: 
	AttrAss (',' attrAssList=AttrAssList)?
;

AttrAss:
	name=ID '=' expr=Expr
;

Block: 
	AnimBlock | EventBlock
;

AnimBlock: 
	'animation' name=ID '(' OBJTYPE objName=ID ')' stmtBlock=StmtBlock 
;

EventBlock: 
	'on' KEYSTROKE StmtBlock 
;

KEYSTROKE: 
	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow'
;

StmtBlock: 
	'{' stmt+=Stmt* '}'
;

Stmt:
	IfStmt | ForStmt | AssStmt ';'
;

IfStmt: 
	'if (' Expr ')' stmtBlockIf=StmtBlock ('else' stmtBlockElse=StmtBlock)?
;

ForStmt: 
	'for (' loopAssSmt1=AssStmt ';' loopExpr=Expr ';' loopAssStmt2=AssStmt ')' stmtBlock=StmtBlock 
;

AssStmt:
	Var '=' expr=Expr
;

Var: 
	name = ID ( '[' expr=Expr ']'('.' memberName=ID)?)? | objectName=ID '.' memberName=ID  
;

Expr returns BOOLEAN: 
	OrExpr
;

OrExpr returns BOOLEAN:
	exprOr+=AndExpr ( '||' exprOr+=AndExpr)*
;

AndExpr returns BOOLEAN:
	exprAnd+=RelExpr ('&&' exprAnd+=RelExpr)*
;

RelExpr returns BOOLEAN:
	exprRel += AddExpr (('<'|'<='|'==') exprRel+=AddExpr)*
;

AddExpr returns NUMBER:
	exprAdd += MultExpr (('+'|'-') exprAdd+=MultExpr)*
;

MultExpr returns NUMBER:
	exprMult+= UnExpr (('*'|'/') exprMult+=UnExpr)*
;

UnExpr returns NUMBER: 
	('!'|'-')? exprAtom=AtomExpr
;

AtomExpr: 
	value=INT| left=Var ('touches' right=Var)? | '(' expr=Expr ')' 
;
