/*
 * generated by Xtext 2.12.0
 */
package edu.udo.generator

import edu.udo.mGPL.Add
import edu.udo.mGPL.And
import edu.udo.mGPL.Animation
import edu.udo.mGPL.AnimationParameter
import edu.udo.mGPL.ArrayElementSelect
import edu.udo.mGPL.AssignmentStatement
import edu.udo.mGPL.AttributeAssignment
import edu.udo.mGPL.AttributeAssignments
import edu.udo.mGPL.Declaration
import edu.udo.mGPL.Event
import edu.udo.mGPL.Expression
import edu.udo.mGPL.ForStatement
import edu.udo.mGPL.IfStatement
import edu.udo.mGPL.IntArrayDecl
import edu.udo.mGPL.IntDecl
import edu.udo.mGPL.IntLiteral
import edu.udo.mGPL.MemberSelect
import edu.udo.mGPL.Mult
import edu.udo.mGPL.Negation
import edu.udo.mGPL.ObjArrayDecl
import edu.udo.mGPL.ObjDecl
import edu.udo.mGPL.Or
import edu.udo.mGPL.Programm
import edu.udo.mGPL.Rel
import edu.udo.mGPL.Statements
import edu.udo.mGPL.Touches
import edu.udo.mGPL.Var
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MGPLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//fsa.generateFile('mgpl_generated.java',compile(resource.allContents.toIterable.findFirst[typeof(Programm)])
		for(e: resource.allContents.toIterable.filter(typeof(Programm)))
		{
			fsa.generateFile(e.name + ".java", e.compile())
		}
	}
	// canvas.setFocusTraversable(true); muss gesetzt werden damit tastenanschläge entgegengenommen werden
	
	def compile(Programm prog) '''
	public class «prog.name.toFirstUpper» {
		public abstract class Animation {
			public abstract void animate(AnimatableObject anim);
		}
		
		public abstract class AnimatableObject {
			public int x;
			public int y; 
			public boolean visible;
		}
		public class Circle extends AnimatableObject{
			public int radius;
		}
		public class Rectangle extends AnimatableObject{
			public int height;
			public int width;
		}
		public  class Triangle extends AnimatableObject{
			public int height;
			public int width;
		}
		
		//List of animatable Objects
		List<Circle> circles = new List<Circle>();
		List<Rectangle> rectangles = new List<Rectangle>();
		List<Triangle> triangles = new List<Triangle>();	
		
		//Declarations
		«FOR d:prog.decl»
		«d.compile»
		«ENDFOR»
		//Declarations end
		
		//Statements
		«(prog.stmtBlock as Statements).compile»
		//Statements end
		
		//Block
		«FOR d:prog.block.filter[x | x instanceof Animation]»
			«compile(d as Animation)»
		«ENDFOR»
		
		canvas.setOnKeyPressed(new EventHandler<KeyEvent>() {
			@Override
			public void handle(KeyEvent event) {
				«FOR d:prog.block.filter[x | x instanceof Event]»
					«compile(d as Event)»
				«ENDFOR»
			}
		};
		
		//Block end
	}
	'''
	
	def compile(Declaration decl) '''
	«IF decl instanceof IntDecl»
	«compile(decl as IntDecl)»
	«ENDIF»
	«IF decl instanceof IntArrayDecl»
	«compile(decl as IntArrayDecl)»
	«ENDIF»
	«IF decl instanceof ObjDecl»
	«compile(decl as ObjDecl)»
	«ENDIF»
	«IF decl instanceof ObjArrayDecl»
	«compile(decl as ObjArrayDecl)»
	«ENDIF»
	'''
	
	def compile(IntDecl decl) '''
	public int «decl.name»«IF decl.init !== null» = «decl.init.expr.compile»«ENDIF»;
	'''
	
	def compile(IntArrayDecl decl) '''
	public «decl.type»[] «decl.name» = new «decl.type»[«decl.size»];
	'''
	
	def compile(ObjArrayDecl decl) '''
	public «decl.type.toFirstUpper»[] «decl.name» = new «decl.type.toFirstUpper»[«decl.size»];
	«decl.type.toLowerCase»s.addAll(«decl.name»);
	
	'''
	
	def compile(ObjDecl decl) '''
	public «decl.type.toFirstUpper» «decl.name» = new «decl.type.toFirstUpper»();
	«IF decl.attrAssList !== null»«(decl.attrAssList as AttributeAssignments).compile(decl.name)»«ENDIF»
	«decl.type.toLowerCase»s.add(«decl.name»);

	'''
	
	def compile(AttributeAssignments list, String objName) '''
	«FOR a:list.assignments»
	«(a as AttributeAssignment).compile(objName)»
	«ENDFOR»'''
	
	def compile(AttributeAssignment ass, String objName)'''
	«objName».«ass.name» = «ass.expr.compile»;'''
	
	
	def compile(Statements stmts)'''
	«FOR stmt:stmts.stmt»
	«IF stmt instanceof IfStatement»
	«compile(stmt as IfStatement)»
	«ENDIF»
	«IF stmt instanceof ForStatement»
	«compile(stmt as ForStatement)»
	«ENDIF»
	«IF stmt instanceof AssignmentStatement»
	«compile(stmt as AssignmentStatement)»
	«ENDIF»
	«ENDFOR»'''
	
	def compile(IfStatement stmt)'''
	if(«(stmt.condition as Expression).compile»){
		«(stmt.stmtBlockIf as Statements).compile»
	}«IF stmt.stmtBlockElse !== null» else {
		«(stmt.stmtBlockElse as Statements).compile»
	}«ENDIF»'''
	
	def compile(AssignmentStatement stmt)'''
	«stmt.^var.compile» = «stmt.expr.compile»;'''
	
	def compile(ForStatement stmt)'''
		for(«(stmt.loopInit as AssignmentStatement).compile» «(stmt.loopCondition as Expression).compile»; «(stmt.loopIncrement as AssignmentStatement).compile»){
			«(stmt.stmtBlock as Statements).compile»
		}'''
	
	def compile(Animation anim)'''
	private class «anim.name.toFirstUpper» extends Animation {
		public void animate(«(anim.param as AnimationParameter).compile»){
			«(anim.stmtBlock as Statements).compile»
		}
	}
	'''
	
	def compile(AnimationParameter param)'''«param.type.toFirstUpper» «param.name»'''
	
	def compile(Expression e){
		switch e{ 
			Or:  '''«e.left.compile»«IF e.right !== null» «e.op» «e.right.compile»«ENDIF»'''
			And : '''«e.left.compile»«IF e.right !== null» «e.op» «e.right.compile»«ENDIF»'''
			Rel : '''«e.left.compile»«IF e.right !== null» «e.op» «e.right.compile»«ENDIF»'''
			Add : '''«e.left.compile»«IF e.right !== null» «e.op» «e.right.compile»«ENDIF»'''
			Mult : '''«e.left.compile»«IF e.right !== null» «e.op» «e.right.compile»«ENDIF»'''
			Negation : '''«e.op»«e.exprAtom.compile»'''
			IntLiteral : '''«e.value»'''
			Touches : '''touches''' //TODO bin ich mir gerade nicht sicher, was Touches in MGPL bedeutet
			default: '''«IF e.expr !== null»(«e.expr») «ELSE»«e.^var.compile»«ENDIF»'''	
		}
	}
	
	def compile(Event event)'''
	   		if( «IF event.keystroke == "rightarrow"»
	   			keyEvent.getCode() == KeyCode.RIGHT ) {
	   		«ELSEIF event.keystroke == "leftarrow"»
	   			keyEvent.getCode() == KeyCode.LEFT ) {
	   		«ELSEIF event.keystroke == "uparrow"»
	   			keyEvent.getCode() == KeyCode.UP ) {
	   		«ELSEIF event.keystroke == "downarrow"»
	   			keyEvent.getCode() == KeyCode.DOWN ) {
	   		«ELSE /*Space*/»
	   			keyEvent.getCode() == KeyCode.SPACE ) {
	   		«ENDIF»
	   			«(event.stmtBlock as Statements).compile»
	   		}
	'''
	
//	on rightarrow
//{
//    if (gun.x < Invaders.width - 50)
//       { gun.x = gun.x + 5; } 
//}
//
//
//// input handler for space which fires the gun
//
//on space
//{
//    // find a bullet that isn't currently active
//    for (i = 0; i < 5; i = i+1)
//    {
//        if (! bullets[i].visible)
//        { bullets[i].visible = 1;
//	    bullets[i].x = gun.x + gun.w/2;
//	    bullets[i].y = gun.y + gun.h;
//	    i = 6; // break out of the loop
//        } 
//    }
//}
//	
	
	def compile(Var ^var){ //Todo funktioniert irgendwie nicht
		if(^var instanceof ArrayElementSelect){
			return '''«compile(^var as ArrayElementSelect)»'''
		} else if(^var instanceof MemberSelect){
			return '''«compile(^var as MemberSelect)»'''
		} else {
			var varName = ^var.name
			switch varName{
				Programm:'''«varName.name»'''
				IntDecl:'''«varName.name»'''
				ObjDecl:'''«varName.name»'''
				ObjArrayDecl:'''«varName.name»'''
				AnimationParameter:'''«varName.name»'''
				Animation:'''«varName.name»'''
				default:'''«varName.eClass»'''
			}
		}
	}
	
	def compile(ArrayElementSelect arr){
		'''«compile(arr.variable)»[«compile(arr.index)»]'''
	}
	
	def compile(MemberSelect mem){
		var fixedMemberName = ""
		switch mem.memberName{
			case "w": fixedMemberName = "width"
			case "h": fixedMemberName = "height"
			case "r": fixedMemberName = "radius"
			default: fixedMemberName = mem.memberName
		}
	'''«compile(mem.variable)».«fixedMemberName»'''
	}
	
	def createDataClasses(){
		'''
		public class GeometricObject {
			int x;
			int y;
			boolean visible;
			
		}
		'''
	}
}
